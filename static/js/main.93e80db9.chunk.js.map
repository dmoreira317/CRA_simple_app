{"version":3,"sources":["components/Card.jsx","components/Cards.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","lang","img","fcolor","scolor","className","style","background","src","ProptTypes","string","Cards","data","url","console","log","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAOMA,G,MAAO,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OACjC,OACE,sBACEC,UAAU,OACVC,MAAO,CACLC,WAAW,4BAAD,OAA8BJ,EAA9B,aAAyCC,EAAzC,MAHd,UAME,qBAAKI,IAAKN,IACV,6BAAKD,SAOXD,EAAKS,WAAa,CAChBR,KAAMQ,IAAWC,OACjBR,IAAKO,IAAWC,OAChBP,OAAQM,IAAWC,OACnBN,OAAQK,IAAWC,QAENV,QCsBAW,EA/CD,WACZ,IAAMC,EAAO,CACX,CACEX,KAAM,SACNY,IAAK,2CACLV,OAAQ,UACRC,OAAQ,WAEV,CACEH,KAAM,OACNY,IAAK,yCACLV,OAAQ,UACRC,OAAQ,WAEV,CACEH,KAAM,QACNY,IAAK,0CACLV,OAAQ,UACRC,OAAQ,WAEV,CACEH,KAAM,OACNY,IAAK,yCACLV,OAAQ,UACRC,OAAQ,YAIZ,OADAU,QAAQC,IAAIH,GAEV,mCAEIA,EAAKI,KAAI,YAAoC,IAAjCf,EAAgC,EAAhCA,KAAMY,EAA0B,EAA1BA,IAAKV,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OAC7B,OACE,cAAC,EAAD,CAEEH,KAAMA,EACNC,IAAKW,EACLV,OAAQA,EACRC,OAAQA,GAJHH,SC7BJgB,G,MALH,WAEV,OAAO,cAAC,EAAD,MCMMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAEP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.93e80db9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ProptTypes from \"prop-types\";\r\nimport \"./Card.css\";\r\n\r\n//proptypes nos permite ver info de los tipos de datos de las props. se puede hacer desde rafcp\r\n\r\n//console.log(ProptTypes);\r\nconst Card = ({ lang, img, fcolor, scolor }) => {\r\n  return (\r\n    <div\r\n      className=\"card\"\r\n      style={{\r\n        background: `linear-gradient(to left, ${fcolor}, ${scolor})`,\r\n      }}\r\n    >\r\n      <img src={img} />\r\n      <h3>{lang}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\n// esto sirve para validar los datos enviados a las props, que se torna importante con el tama√±o de las apps\r\n\r\nCard.ProptTypes = {\r\n  lang: ProptTypes.string,\r\n  img: ProptTypes.string,\r\n  fcolor: ProptTypes.string,\r\n  scolor: ProptTypes.string,\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\n//Fragments hace que no se aniden demasiados divs viene de React.Fragments y se puede usar directamente con <></> vacios.\r\nconst Cards = () => {\r\n  const data = [\r\n    {\r\n      lang: \"Python\",\r\n      url: \"https://cdn.svgporn.com/logos/python.svg\",\r\n      fcolor: \"#00c3ff\",\r\n      scolor: \"#ffff1c\",\r\n    },\r\n    {\r\n      lang: \"Java\",\r\n      url: \"https://cdn.svgporn.com/logos/java.svg\",\r\n      fcolor: \"#D31027\",\r\n      scolor: \"#EA384D\",\r\n    },\r\n    {\r\n      lang: \"React\",\r\n      url: \"https://cdn.svgporn.com/logos/react.svg\",\r\n      fcolor: \"#000428\",\r\n      scolor: \"#004e92\",\r\n    },\r\n    {\r\n      lang: \"Perl\",\r\n      url: \"https://cdn.svgporn.com/logos/perl.svg\",\r\n      fcolor: \"#cc2b5e\",\r\n      scolor: \"#753a88\",\r\n    },\r\n  ];\r\n  console.log(data);\r\n  return (\r\n    <>\r\n      {\r\n        data.map(({ lang, url, fcolor, scolor }) => {\r\n          return (\r\n            <Card\r\n              key={lang}\r\n              lang={lang}\r\n              img={url}\r\n              fcolor={fcolor}\r\n              scolor={scolor}\r\n            />\r\n          );\r\n        }) //parfa acceder a los elementos de mi data\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import Contador from \"./components/Contador\"; //puedo cambiarle el nombre al componente si exporto el componente por default.\nimport Cards from \"./components/Cards\";\nimport \"./App.css\";\n\nconst App = () => {\n  // return <Contador inicial={5} factor={3} />; //inicial es una prop que creo yo, lo mismo que factor\n  return <Cards />;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  // strict mode nos obliga a usar buenas practicas\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}